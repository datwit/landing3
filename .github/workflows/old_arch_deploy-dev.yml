name: Deploy development.datwit.com
on: workflow_dispatch

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      STAGE: Dev
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      - name: Install dependencies
        run: |
          npm install -g aws-cdk@next
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
      - name: Deploy site
        env:
          CDK_DEFAULT_ACCOUNT: ${{ secrets.CDK_DEFAULT_ACCOUNT }}
          CERTIFICATE_ARN: ${{ secrets.CERTIFICATE_ARN }}
          CDK_DEFAULT_REGION: eu-west-1
          SITE_DOMAIN_NAME: development.datwit.com
          ZONE_DOMAIN_NAME: datwit.com
          LADING_DEV_USERNAME: landing_deploy
          ASSETS_SOURCE_KEY: dev_landing_assets.zip
          NEXT_PUBLIC_FORM_SUFFIX: jsagr63434
          DATWIT_RCPT: contact@datwit.com
          DATWIT_FROM: noreply@datwit.com
          LOG_LEVEL: DEBUG
        run: |
          cdk deploy DevStack --require-approval never --outputs-file cdk.out/DevStack.outputs.json
          CONTENT=`echo $(jq -r '.DevStack.AssetsS3Uri' cdk.out/DevStack.outputs.json)`
          aws s3 cp "$CONTENT" "$ASSETS_SOURCE_KEY"
          unzip "$ASSETS_SOURCE_KEY" -d static_site/
          cdk deploy "SiteStack$STAGE" --require-approval never